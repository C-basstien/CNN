// Format me with:
//   clang-format -i -style=file main.cpp
//
// Compile me with:
//   g++ -o main.exe main.cpp
// or with:
//   g++ -Wall  -o main.exe main.cpp
//
// Run the compiled program (exe):
//   ./main.exe
#include "../headers/main.hpp"

int main()
{
    //getPGMfile()
    int im_size[3];
    int ker_size[3];
    ker_size[0]=3;
    ker_size[1]=3;
    ker_size[2]=3;
    ker_size[3]=2;
    char ***im=read_png_file("test.png",im_size );
    double **** ker= new double ***[ker_size[0]]();
    for (int i = 0; i <ker_size[0];i++)
    {
        ker[i] = new double**[ker_size[1]]();
        for (int j = 0; j <ker_size[1] ;j++)
        {
            ker[i][j]= new double*[ker_size[1]]();
            for (int k = 0; k <ker_size[2] ;k++)
            {
                ker[i][j][k] = new double[ker_size[3]]();
                for (int l = 0; l <ker_size[3] ;l++)
                {
                    ker[i][j][k][l]=((rand()/(double)(RAND_MAX)));

                }
            }
        }
    }
    for (int i = 0; i <ker_size[0];i++)
    {
        for (int j = 0; j <ker_size[1] ;j++)
        {
            for (int k = 0; k <ker_size[2] ;k++)
            {
                for (int l = 0; l <ker_size[3] ;l++)
                {
                    printf("ker:[%u][%u][%u][%u]: %lf\n",i,j,k,l,ker[i][j][k][l]);
                }
            }
        }
    }
    //
   /* const int im_width= sizeof(im)/(sizeof(im[0]));
	const int im_height= sizeof(im[0])/(sizeof(im[0][0]));
	const int im_canal= sizeof(im[0][0]);*/
	cout<<im_size[0]<<endl;
	cout<<im_size[1]<<endl;
	cout<<im_size[2]<<endl;
	cout << "Image readed sucessfully\n" << endl;
	double *** res=convolve(im,ker,im_size,ker_size);
    cout << "Convolution Done" << endl;
    int sig_size[3];sig_size[0]=im_size[0];sig_size[1]=im_size[1];sig_size[2]=ker_size[3];

    relu(res,sig_size);
    /*for (int i = 0; i <im_size[0];i++)//affiche le resutat de la convolution
    {
        for (int j = 0; j <im_size[1] ;j++)
        {
            for (int k = 0; k <ker_size[3] ;k++)
            {
                    printf("ker:[%u][%u][%u]: %lf\n",i,j,k,res[i][j][k]);
            }
        }
    }*/
    cout << "Relu Done" << endl;
    maxpool(res,sig_size,4);
    cout << "Maxpool Done!" << endl;
        /*for (int i = 0; i <im_size[0];i++)//affiche le resutat de la convolution
    {
        for (int j = 0; j <im_size[1] ;j++)
        {
            for (int k = 0; k <ker_size[3] ;k++)
            {
                    printf("ker:[%u][%u][%u]: %lf\n",i,j,k,res[i][j][k]);
            }
        }
    }*/
    return 0;
}
