#include <main.hpp>
double*** convolve(char*** im, double**** ker,int* im_size, int* ker_size)
{
	/**Get the dimmension**/

		/*IM*/
	int im_width= im_size[0];
	int im_height= im_size[1];
	int im_canal= im_size[2];

		/*KER*/
	int ker_width= ker_size[0];
	int ker_height= ker_size[1];
	int ker_canal= ker_size[2];
	int ker_filter= ker_size[3];

	/**Create a buffer and output val**/

	double *** buff= new double **[im_width+ker_width-1]();
    for (int i = 0; i < im_width+ker_width-1;i++)
    {
        buff[i] = new double*[im_height+ker_height-1]();
        for (int j = 0; j < im_height+ker_height-1;j++){buff[i][j] = new double[ker_filter]();}
    }


	/*[const int(im_height+ker_height-1)][const int(ker_filer)];
	int * out= new int[const int(im_width)][const int(im_height)][const int(ker_filer)];*/


	/**Filter Loop**/
	for(int filter_index=0;filter_index< ker_filter;filter_index++)
	{
		for(int canal_index=0;canal_index< im_canal;canal_index++)
		{

			for(int x=0;x< im_width+ker_width;x++)
			{
				for(int y=0;y< im_height+ker_height;y++)
				{
					for(int ind_ker_x=0;ind_ker_x< ker_width;ind_ker_x++)
					{
						for(int ind_ker_y=0;ind_ker_y< ker_height;ind_ker_y++)
						{
							if( x-ind_ker_x<0 || x-ind_ker_x >=im_width || y-ind_ker_y<0 || y-ind_ker_y >= im_height ){}
                            else{buff[x][y][filter_index]=buff[x][y][filter_index]+im[x-ind_ker_x][y-ind_ker_y][canal_index]*ker[ind_ker_x][ind_ker_y][canal_index][filter_index];}
						}
					}
				}
			}
		}
	}
	/*for (int x=0; x< im_width;x++)
	{
		 for (int y=0;y< im_height;y++)
		{
			out[x][y]=buff[x][y];
		}
	}*/
	//delete buff;
	return buff;
}
